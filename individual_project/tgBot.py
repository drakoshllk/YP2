from math import trunc

import telebot, random, time
from telebot import types

bot = telebot.TeleBot('7215955531:AAH9xQ7vkJs_SuZRF9CWcLgbfgW7lvHsMEs')

wallet, balance = 30000, 10000
welcome_message = "–ü—Ä–∏–≤–µ—Ç, –ª—É–¥–∏–∫, –≤ –Ω–∞—à–µ–º –∫–∞–∑–∏–Ω–æ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä: –∫—Ä–∞—à–µ—Ä, —Å–ª–æ—Ç—ã –∏ –±–ª—ç–∫–¥–∂–µ–∫. –¢–∞–∫ –∂–µ —É —Ç–µ–±—è –µ—Å—Ç—å –±–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ –∏ —Ç–≤–æ–π –∫–æ—à–µ–ª—å. –¢—ã –º–æ–∂–µ—à—å –∫–∞–∫ –≤—ã–≤–µ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å —Å –∫–∞–∑–∏–∫–∞, —Ç–∞–∫ –∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å. –¢–∞–∫ –∂–µ —Ç—ã –º–æ–∂–µ—à—å –≤–∑—è—Ç—å –≤–∏—Ä—Ç—ã –≤ –¥–æ–ª–≥. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏ –∫–æ—à–µ–ª–µ–∫ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–µ. –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã –∏ —É–¥–∞—á–∏!"
slots_arr = ('üü°', 'üíé', 'üçã', 'üçè', 'üçí', '7Ô∏è‚É£')

@bot.message_handler(commands=['start'])
def welcome(message):
    keyboard = (types.KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—à–µ–ª–µ–∫'), types.KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å'), types.KeyboardButton('–í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç'),
                types.KeyboardButton('–í—ã–≤–æ–¥'), types.KeyboardButton('–î–æ–¥—ç–ø'), types.KeyboardButton('–ö—Ä–∞—à–µ—Ä'),
                types.KeyboardButton('–°–ª–æ—Ç—ã'), types.KeyboardButton('–ë–ª—ç–∫–¥–∂—ç–∫'), types.KeyboardButton('–ö–æ–∏–Ω—Ñ–ª–∏–ø'))
    reply_markup = types.ReplyKeyboardMarkup()
    reply_markup.row(keyboard[0], keyboard[1], keyboard[2])
    reply_markup.row(keyboard[3], keyboard[4])
    reply_markup.row(keyboard[5], keyboard[6], keyboard[7])
    reply_markup.row(keyboard[8])
    bot.send_message(message.chat.id, welcome_message, reply_markup=reply_markup)
    bot.register_next_step_handler(message, on_click)

def on_click(message):
    if message.text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—à–µ–ª–µ–∫':
        bot.send_message(message.chat.id, f'–í —Ç–≤–æ–µ–º –∫–æ—à–µ–ª—å–∫–µ {wallet} –≤–∏—Ä—Ç–æ–≤')
        bot.register_next_step_handler(message, on_click)
    elif message.text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å':
        bot.send_message(message.chat.id, f'–ù–∞ —Ç–≤–æ–µ–º –±–∞–ª–∞–Ω—Å–µ {balance} –≤–∏—Ä—Ç–æ–≤')
        bot.register_next_step_handler(message, on_click)
    elif message.text == '–í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç':
        debt_value = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞')
        bot.register_next_step_handler(debt_value, credit)
    elif message.text == '–í—ã–≤–æ–¥':
        withdraw_value = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞')
        bot.register_next_step_handler(withdraw_value, withdraw)
    elif message.text == '–î–æ–¥—ç–ø':
        dodep_value = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ —Å—É–º–º—É –¥–æ–¥—ç–ø—á–∏–∫–∞')
        bot.register_next_step_handler(dodep_value, dodep)
    elif message.text == '–ö—Ä–∞—à–µ—Ä':
        usr_msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –∏ –∏–∫—Å –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–≤–∏—à—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
        bot.register_next_step_handler(usr_msg, crasher)
    elif message.text == '–°–ª–æ—Ç—ã':
        usr_msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏')
        bot.register_next_step_handler(usr_msg, slots)
    elif message.text == '–ë–ª—ç–∫–¥–∂—ç–∫':
        usr_msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏')
        bot.register_next_step_handler(usr_msg, blackjack)
    elif message.text == '–ö–æ–∏–Ω—Ñ–ª–∏–ø':
        usr_msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏')
        bot.register_next_step_handler(usr_msg, coinflip)
    else:
        bot.send_message(message.chat.id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        bot.register_next_step_handler(message, on_click)


def coinflip(message):
    global bet_amount
    try:
        bet_amount = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ!')
        bot.register_next_step_handler(message, on_click)
        return 1
    global balance
    if bet_amount > balance or bet_amount < 0:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç—É!')
        bot.register_next_step_handler(message, on_click)
    else:
        balance -= bet_amount
        var_data = bot.send_message(message.chat.id, f'–°–æ —Å—á–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ {bet_amount}')
        time.sleep(2)
        bot.edit_message_text("–ü–æ–¥–∫–∏–¥—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫—É...", var_data.chat.id, var_data.message_id)
        time.sleep(4)


def blackjack(message):
    global bet_amount
    try:
        bet_amount = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ!')
        bot.register_next_step_handler(message, on_click)
        return 1
    global balance
    if bet_amount > balance or bet_amount < 0:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç—É!')
        bot.register_next_step_handler(message, on_click)
    else:
        balance -= bet_amount
        var_data = bot.send_message(message.chat.id, f'–°–æ —Å—á–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ {bet_amount}')
        time.sleep(2)
        bot.edit_message_text("–†–∞–∑–¥–∞—á–∞...", var_data.chat.id, var_data.message_id)
        time.sleep(4)
        diler_hand = random.randint(15, 23)
        cards = (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 10, 10, 10)
        global player_hand
        player_hand = random.choice(cards) + random.choice(cards)
        if diler_hand > 21 and player_hand != 21:
            balance += bet_amount * 2
            bot.edit_message_text(f'–í—ã –í—ã–∏–≥—Ä–∞–ª–∏! –î–∏–ª–µ—Ä –ø–µ—Ä–µ–±—Ä–∞–ª!\n'
                                  f'–ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ: {bet_amount * 2}', var_data.chat.id, var_data.message_id)
            bot.register_next_step_handler(message, on_click)
        elif player_hand == 21 and diler_hand != 21:
            balance += bet_amount * 2.5
            bot.edit_message_text(f'–ë–ª—ç–∫–¥–∂–µ–∫! –í—ã –í—ã–∏–≥—Ä–∞–ª–∏!\n'
                                  f'–ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ: {bet_amount * 2.5}', var_data.chat.id, var_data.message_id)
            bot.register_next_step_handler(message, on_click)
        else:
            if player_hand_generate(player_hand, var_data):
                pass
            else:
                pass

def player_hand_generate(player_hand, var_data):

    reply_markup = types.InlineKeyboardMarkup()
    keyboard = (types.InlineKeyboardButton('–í–∑—è—Ç—å', callback_data='take'), types.InlineKeyboardButton('–•–≤–∞—Ç–∏—Ç', callback_data='drop'))
    reply_markup.row(keyboard[0])
    reply_markup.row(keyboard[1])
    bot.edit_message_text(f'–í –≤–∞—à–µ–π —Ä—É–∫–µ {player_hand}\n', var_data.chat.id, var_data.message_id, reply_markup=reply_markup)

@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    if callback.data == 'take':
        pass
    elif callback.data == 'drop':
        pass

def slots(message):
    global bet_amount
    try:
        bet_amount = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ!')
        bot.register_next_step_handler(message, on_click)
        return 1
    global balance
    if bet_amount > balance or bet_amount < 0:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç—É!')
        bot.register_next_step_handler(message, on_click)
    else:
        balance -= bet_amount
        var_data = bot.send_message(message.chat.id, f'–°–æ —Å—á–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ {bet_amount}')
        time.sleep(2)
        global slots_arr
        play_combination = [random.choice(slots_arr), random.choice(slots_arr), random.choice(slots_arr)]
        combination_str = ""
        for i in range(3):
            combination_str += play_combination[i]
            bot.edit_message_text(combination_str, var_data.chat.id, var_data.message_id)
            time.sleep(4)
        if all(i == play_combination[0] for i in play_combination):
            win_amount = calculate_win_amount(play_combination, bet_amount)
            balance += win_amount
            bot.edit_message_text(f'–í—ã –í—ã–∏–≥—Ä–∞–ª–∏!\n–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet_amount}\n'
                                       f'–ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ: {win_amount}', var_data.chat.id, var_data.message_id)
            bot.register_next_step_handler(message, on_click)
        else:
            bot.edit_message_text(f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!', var_data.chat.id, var_data.message_id)
            bot.register_next_step_handler(message, on_click)

def calculate_win_amount(play_combination, bet_amount):
    global slots_arr
    if play_combination[0] == slots_arr[0]:
        return bet_amount * 100
    elif play_combination[0] == slots_arr[1]:
        return bet_amount * 10
    elif play_combination[0] == slots_arr[2]:
        return bet_amount * 5
    elif play_combination[0] == slots_arr[3]:
        return bet_amount * 3
    elif play_combination[0] == slots_arr[4]:
        return bet_amount
    elif play_combination[0] == slots_arr[5]:
        return bet_amount * 1000

def crasher(message):
    global bet_amount, user_x
    try:
        bet_amount, user_x = message.text.split(',')
        bet_amount = int(bet_amount)
        user_x = round(float(user_x), 2)
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º–∞ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏!')
        bot.register_next_step_handler(message, on_click)
        return 1
    global balance
    if bet_amount > balance or bet_amount < 0 or user_x < 0 or user_x > 10:
        bot.send_message(message.chat.id,'–õ–∏–±–æ —É –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç—É, –ª–∏–±–æ —Å—Ç–∞–≤–∫–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞!')
        bot.register_next_step_handler(message, on_click)
    else:
        balance -= bet_amount
        var_data = bot.send_message(message.chat.id, f'–°–æ —Å—á–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ {bet_amount}')
        time.sleep(2)
        bot.edit_message_text("–¢–∞–∫ —Ç–∞–∫, —á—Ç–æ —Ç—É—Ç —É –Ω–∞—Å", var_data.chat.id, var_data.message_id)
        time.sleep(5)
        generated_x = round(random.uniform(1, 7), 2)
        if user_x <= generated_x:
            win_amount = round(bet_amount * user_x, 2)
            if win_amount % 1 == 0:
                win_amount = int(win_amount)
            balance += win_amount
            bot.edit_message_text(f'–í—ã –í—ã–∏–≥—Ä–∞–ª–∏!\n–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet_amount}\n'
                                       f'–ò–∫—Å –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏: {user_x}\n'
                                       f'–ò–∫—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–∞–ª: {generated_x}\n'
                                       f'–ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ: {win_amount}', var_data.chat.id, var_data.message_id)
            bot.register_next_step_handler(message, on_click)
        else:
            bot.edit_message_text(f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!\n–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet_amount}\n'
                                       f'–ò–∫—Å –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏: {user_x}\n'
                                       f'–ò–∫—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–∞–ª: {generated_x}', var_data.chat.id, var_data.message_id)
            bot.register_next_step_handler(message, on_click)

def dodep(message):
    try:
        value = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —á–∏—Å–ª–æ!')
        bot.register_next_step_handler(message, on_click)
        return 1
    global balance, wallet
    if value <= wallet and value >= 0:
        balance += value
        wallet -= value
        bot.send_message(message.chat.id, '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!')
        bot.register_next_step_handler(message, on_click)
    else:
        bot.send_message(message.chat.id, '–í —Ç–≤–æ–µ–º –∫–æ—à–µ–ª—å–∫–µ –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω—è–≥!')
        bot.register_next_step_handler(message, on_click)

def withdraw(message):
    try:
        value = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —á–∏—Å–ª–æ!')
        bot.register_next_step_handler(message, on_click)
        return 1
    global balance, wallet
    if value <= balance and value >= 0:
        balance -= value
        wallet += value
        bot.send_message(message.chat.id, '–í—ã–≤–æ–¥ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!')
        bot.register_next_step_handler(message, on_click)
    else:
        bot.send_message(message.chat.id, '–ù–∞ —Ç–≤–æ–µ–º —Å—á–µ—Ç—É –≤ –∫–∞–∑–∏–Ω—ã—á–µ –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω—è–≥!')
        bot.register_next_step_handler(message, on_click)

def credit(message):
    try:
        value = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —á–∏—Å–ª–æ!')
        bot.register_next_step_handler(message, on_click)
        return 1
    if value > 0:
        global wallet
        wallet += value
        bot.send_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏ –∫—Ä–µ–¥–∏—Ç!')
        bot.register_next_step_handler(message, on_click)
    else:
        bot.send_message(message.chat.id, '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞')
        bot.register_next_step_handler(message, on_click)

bot.infinity_polling()